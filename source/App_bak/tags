!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddHldsAgent	agent_manager.cpp	/^void agent_manager::AddHldsAgent()$/;"	f	class:agent_manager
AppHuman	hlds_agent.h	/^struct AppHuman {$/;"	s
CC	Makefile	/^CC= g++$/;"	m
CFLAGS	Makefile	/^CFLAGS    =-std=c++11 -Wall -Wno-deprecated -D _LINUX_COMPILE -Wno-unknown-pragmas -Wno-literal-suffix -Wno-switch-enum -Wno-delete-non-virtual-dtor -Wno-switch -Wno-unused-variable$/;"	m
COUNT_DOWN	hlds_agent.h	16;"	d
COUNT_LEFT	hlds_agent.h	17;"	d
COUNT_NO	hlds_agent.h	13;"	d
COUNT_RIGHT	hlds_agent.h	15;"	d
COUNT_UP	hlds_agent.h	14;"	d
CatchHumans	hlds_agent.cpp	/^void hlds_agent::CatchHumans(FrameHumans *pframehumans)$/;"	f	class:hlds_agent
ChangeAttribute	hlds_agent.cpp	/^bool hlds_agent:: ChangeAttribute(Tof* tof, float x, float y, float z, float rx, float ry, float rz)$/;"	f	class:hlds_agent
ClearRecvQ	agent_client.cpp	/^void agent_client::ClearRecvQ()$/;"	f	class:agent_client
ClearSendQ	agent_client.cpp	/^void agent_client::ClearSendQ()$/;"	f	class:agent_client
ComPacketProc	agent_client.cpp	/^void agent_client::ComPacketProc()$/;"	f	class:agent_client
Count	hlds_agent.h	/^} Count;$/;"	v	typeref:struct:__anon1
DEFAULT_MAX_PACKET_UNIT_SIZE	agent_broker.h	/^		const static int DEFAULT_MAX_PACKET_UNIT_SIZE = 1024;$/;"	m	class:agent_broker
DEFAULT_PORT	accept_manager.h	/^        const static unsigned short DEFAULT_PORT = 6885;$/;"	m	class:accept_manager
DelHldsAgent	agent_manager.cpp	/^void agent_manager::DelHldsAgent()$/;"	f	class:agent_manager
Enter	hlds_agent.h	/^    int Enter[4];           \/\/Human count who enter to the area from each direction(Use COUNT_XXX macro)$/;"	m	struct:__anon1
Exit	hlds_agent.h	/^    int Exit[4];            \/\/Human count who exit from the area to each direction(Use COUNT_XXX macro)$/;"	m	struct:__anon1
GetCurImage	agent_broker.cpp	/^int agent_broker::GetCurImage(Mat* out_img, uint32_t& should_diff_idx)$/;"	f	class:agent_broker
GetTofInstance	hlds_agent.h	/^        Tof* GetTofInstance() { return m_Tof; }$/;"	f	class:hlds_agent
HEADER	Makefile	/^HEADER :=$(wildcard *.h)$/;"	m
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
InArea	hlds_agent.h	/^    int InArea;             \/\/Total number of humans in count area$/;"	m	struct:__anon1
InitAgent	hlds_agent.cpp	/^int hlds_agent::InitAgent()$/;"	f	class:hlds_agent
InitManager	agent_manager.cpp	/^void agent_manager::InitManager()$/;"	f	class:agent_manager
InitializeHumans	hlds_agent.cpp	/^void hlds_agent::InitializeHumans(void)$/;"	f	class:hlds_agent
LIB_PATHS	Makefile	/^LIB_PATHS = $(OPENCV_INC_PATH) $(OPENCV_LIB_PATH) $(ISAVER_LIB_PATH) $(JPEGTURBO_LIB_PATH)  $/;"	m
LoadIniFile	hlds_agent.cpp	/^bool hlds_agent::LoadIniFile(void)$/;"	f	class:hlds_agent
MAX_RECVQ_SIZE	agent_client.h	/^        const static int MAX_RECVQ_SIZE = 32;$/;"	m	class:agent_client
MAX_SENDQ_SIZE	agent_client.h	/^        const static int MAX_SENDQ_SIZE = 2048;$/;"	m	class:agent_client
MAX_TRACKS	hlds_agent.h	12;"	d
OBJS	Makefile	/^OBJS=$(patsubst %.cpp, %.o,$(SOURCES))$/;"	m
PopRecvPacket	agent_client.cpp	/^xpacket* agent_client::PopRecvPacket()$/;"	f	class:agent_client
PopSendPacket	agent_client.cpp	/^xpacket* agent_client::PopSendPacket()$/;"	f	class:agent_client
Proc	accept_manager.cpp	/^int accept_manager::Proc()$/;"	f	class:accept_manager
Proc	agent_broker.cpp	/^int agent_broker::Proc()$/;"	f	class:agent_broker
Proc	agent_client.cpp	/^int agent_client::Proc()$/;"	f	class:agent_client
Proc	agent_manager.cpp	/^int agent_manager::Proc()$/;"	f	class:agent_manager
Proc	event_manager.cpp	/^int event_manager::Proc()$/;"	f	class:event_manager
Proc	hlds_agent.cpp	/^int hlds_agent::Proc()$/;"	f	class:hlds_agent
Proc	stream_hlds.cpp	/^int stream_hlds::Proc()$/;"	f	class:stream_hlds
PushRecvPacket	agent_client.cpp	/^void agent_client::PushRecvPacket(xpacket* packet)$/;"	f	class:agent_client
PushSendPacket	agent_client.cpp	/^void agent_client::PushSendPacket(xpacket* packet)$/;"	f	class:agent_client
RECV_BUF_LEN	accept_manager.h	/^        const static int RECV_BUF_LEN = 256;$/;"	m	class:accept_manager
RECV_BUF_LEN	agent_client.h	/^        const static int RECV_BUF_LEN = 256;$/;"	m	class:agent_client
SAFE_DELETE	agent_client.h	11;"	d
SOURCES	Makefile	/^SOURCES := $(wildcard *.cpp)$/;"	m
STREAM_IMG_HEIGHT	agent_broker.h	/^		const static int STREAM_IMG_HEIGHT = 240;$/;"	m	class:agent_broker
STREAM_IMG_WIDTH	agent_broker.h	/^		const static int STREAM_IMG_WIDTH = 320;$/;"	m	class:agent_broker
STREAM_OFF	agent_client.h	/^const int STREAM_OFF = 0;$/;"	v
STREAM_ON	agent_client.h	/^const int STREAM_ON = 1;$/;"	v
SaveIniFile	agent_manager.cpp	/^void agent_manager::SaveIniFile()$/;"	f	class:agent_manager
SendProc	agent_client.cpp	/^void agent_client::SendProc()$/;"	f	class:agent_client
SetThreadCount	hlds_agent.cpp	/^void hlds_agent::SetThreadCount(int index)$/;"	f	class:hlds_agent
Square	hlds_agent.h	/^    } Square;$/;"	m	struct:__anon1	typeref:struct:__anon1::__anon2
StreamHLDSClients	agent_broker.cpp	/^void agent_broker::StreamHLDSClients(uint8_t* jpg_data, uint32_t jpg_len, uint32_t index)$/;"	f	class:agent_broker
TARGET	Makefile	/^TARGET = HLDS_AGENT$/;"	m
TotalEnter	hlds_agent.h	/^    int TotalEnter;         \/\/Total number of humans entering$/;"	m	struct:__anon1
TotalExit	hlds_agent.h	/^    int TotalExit;          \/\/Total number of humans exiting$/;"	m	struct:__anon1
USING_LIBS	Makefile	/^USING_LIBS = -lpthread -lxpacket -lxthread -lrt -lcommon -lboost_system -lboost_thread -lboost_locale$/;"	m
UpdateHLDSImage	agent_broker.cpp	/^void agent_broker::UpdateHLDSImage(Mat*img, bool use_lock)$/;"	f	class:agent_broker
accept_manager	accept_manager.cpp	/^accept_manager::accept_manager()$/;"	f	class:accept_manager
accept_manager	accept_manager.cpp	/^accept_manager::accept_manager(unsigned short port)$/;"	f	class:accept_manager
accept_manager	accept_manager.h	/^class accept_manager : public xthread$/;"	c
agent_broker	agent_broker.cpp	/^agent_broker::agent_broker()$/;"	f	class:agent_broker
agent_broker	agent_broker.h	/^class agent_broker : public xthread$/;"	c
agent_client	agent_client.cpp	/^agent_client::agent_client(tcp::socket* _socket)$/;"	f	class:agent_client
agent_client	agent_client.h	/^class agent_client : public xthread $/;"	c
agent_manager	agent_manager.cpp	/^agent_manager::agent_manager()$/;"	f	class:agent_manager
agent_manager	agent_manager.h	/^class agent_manager : public xthread$/;"	c
appid	hlds_agent.h	/^    int appid;                  \/\/Human ID managed in application(HumanCounter.cpp)$/;"	m	struct:AppHuman
bEnable	hlds_agent.h	/^    bool bEnable;               \/\/false : Candidate(Not recognized as a human yet)$/;"	m	struct:AppHuman
bottom_y	hlds_agent.h	/^        float bottom_y;$/;"	m	struct:__anon1::__anon2
config	main.cpp	/^Config *config;$/;"	v
dbglog	main.cpp	/^DebugLogger *dbglog;$/;"	v
direction	hlds_agent.h	/^    float direction;            \/\/Direction of body(0 degree to 359 degree) --> Positive direction of Y-axis is 0 degree, and clockwise$/;"	m	struct:AppHuman
enterdir	hlds_agent.h	/^    int enterdir;               \/\/Direction entering to the count area(COUNT_XXX macro)$/;"	m	struct:AppHuman
event_manager	event_manager.cpp	/^event_manager::event_manager()$/;"	f	class:event_manager
event_manager	event_manager.h	/^class event_manager : public xthread$/;"	c
exitdir	hlds_agent.h	/^    int exitdir;                \/\/Direction exiting from the count area(COUNT_XXX macro)$/;"	m	struct:AppHuman
gmarket	main.cpp	/^GMarket gmarket;$/;"	v
handheight	hlds_agent.h	/^    float handheight;           \/\/Hand height from floor(mm)(bHand == true)$/;"	m	struct:AppHuman
headheight	hlds_agent.h	/^    float headheight;           \/\/Head height from floor(mm)$/;"	m	struct:AppHuman
hlds_agent	hlds_agent.cpp	/^hlds_agent::hlds_agent()$/;"	f	class:hlds_agent
hlds_agent	hlds_agent.h	/^class hlds_agent : public xthread$/;"	c
id	hlds_agent.h	/^    long id;                    \/\/Human ID managed in HumanDetect function of SDK$/;"	m	struct:AppHuman
initconfig	main.cpp	/^void initconfig()$/;"	f
initlog	main.cpp	/^void initlog(const char *procname)$/;"	f
left_x	hlds_agent.h	/^        float left_x;$/;"	m	struct:__anon1::__anon2
lock_img_set	agent_broker.h	/^		void lock_img_set() { m_img_set_lock.lock(); }$/;"	f	class:agent_broker
m_Tof	hlds_agent.h	/^        Tof *m_Tof = nullptr;$/;"	m	class:hlds_agent
m_acceptor	accept_manager.h	/^        tcp::acceptor *m_acceptor;$/;"	m	class:accept_manager
m_agents_lock	agent_manager.h	/^        mutex m_agents_lock;$/;"	m	class:agent_manager
m_angle_x	hlds_agent.h	/^		float m_angle_x;              \/\/Angle to rotate around X-axis(degree)$/;"	m	class:hlds_agent
m_angle_y	hlds_agent.h	/^        float m_angle_y;               \/\/Angle to rotate around Y-axis(degree)$/;"	m	class:hlds_agent
m_angle_z	hlds_agent.h	/^        float m_angle_z;               \/\/Angle to rotate around Z-axis(degree)$/;"	m	class:hlds_agent
m_apphumanid	hlds_agent.h	/^        int m_apphumanid;$/;"	m	class:hlds_agent
m_apphumans	hlds_agent.h	/^        vector<AppHuman> m_apphumans;$/;"	m	class:hlds_agent
m_bBack	hlds_agent.h	/^        bool m_bBack;                 \/\/Mode to display footprint on background$/;"	m	class:hlds_agent
m_bBoxShift	hlds_agent.h	/^        bool m_bBoxShift;              \/\/true: shift, false: change size in count area setting mode$/;"	m	class:hlds_agent
m_bCount	hlds_agent.h	/^        bool m_bCount;                 \/\/Mode to display human count$/;"	m	class:hlds_agent
m_bPoint	hlds_agent.h	/^        bool m_bPoint;                 \/\/Mode to display points$/;"	m	class:hlds_agent
m_bSubDisplay	hlds_agent.h	/^        bool m_bSubDisplay;            \/\/Mode to display sub display$/;"	m	class:hlds_agent
m_back	hlds_agent.h	/^		cv::Mat m_back;$/;"	m	class:hlds_agent
m_camera_type	stream_hlds.h	/^    int m_camera_type = 0;$/;"	m	class:stream_hlds
m_clients	agent_broker.h	/^		deque<agent_client*> m_clients;$/;"	m	class:agent_broker
m_clients_lock	agent_broker.h	/^		mutex m_clients_lock;$/;"	m	class:agent_broker
m_compacket_thread	agent_client.h	/^        thread m_compacket_thread;$/;"	m	class:agent_client
m_compacket_thread_stop_flag	agent_client.h	/^        bool m_compacket_thread_stop_flag = false;$/;"	m	class:agent_client
m_cur_hlds_img	agent_broker.h	/^		Mat* m_cur_hlds_img = nullptr;$/;"	m	class:agent_broker
m_cur_img_index	agent_broker.h	/^		uint32_t m_cur_img_index = 0;$/;"	m	class:agent_broker
m_dx	hlds_agent.h	/^        float m_dx;                  \/\/Shift length to x-axis positive direction(mm)$/;"	m	class:hlds_agent
m_dy	hlds_agent.h	/^        float m_dy;                  \/\/Shift length to y-axis positive direction(mm)$/;"	m	class:hlds_agent
m_el_sec	agent_client.h	/^        chrono::duration<double> m_el_sec;$/;"	m	class:agent_client
m_end_time	agent_client.h	/^        chrono::time_point<chrono::system_clock> m_end_time;$/;"	m	class:agent_client
m_frame	hlds_agent.h	/^        FrameDepth m_frame;$/;"	m	class:hlds_agent
m_frame3d	hlds_agent.h	/^        Frame3d m_frame3d;$/;"	m	class:hlds_agent
m_framehumans	hlds_agent.h	/^        FrameHumans m_framehumans;$/;"	m	class:hlds_agent
m_height	hlds_agent.h	/^        float m_height;             \/\/Height from floor(mm)$/;"	m	class:hlds_agent
m_hlds_agents	agent_manager.h	/^        deque<hlds_agent*> m_hlds_agents;$/;"	m	class:agent_manager
m_img	hlds_agent.h	/^		cv::Mat m_img;$/;"	m	class:hlds_agent
m_img_set_lock	agent_broker.h	/^		mutex m_img_set_lock; \/\/img_set components : lpr_img & context_img$/;"	m	class:agent_broker
m_index	agent_manager.h	/^        int m_index;$/;"	m	class:agent_manager
m_index	event_manager.h	/^        int m_index;$/;"	m	class:event_manager
m_index	hlds_agent.h	/^        int m_index;$/;"	m	class:hlds_agent
m_io_service	accept_manager.h	/^        boost::asio::io_service m_io_service;$/;"	m	class:accept_manager
m_jpg_buf	stream_hlds.h	/^    uint8_t* m_jpg_buf;$/;"	m	class:stream_hlds
m_jpg_compressor	stream_hlds.h	/^    tjhandle m_jpg_compressor;$/;"	m	class:stream_hlds
m_last_hlds_img_index	stream_hlds.h	/^    uint32_t m_last_hlds_img_index = 0;$/;"	m	class:stream_hlds
m_making_packet	accept_manager.h	/^        xpacket *m_making_packet = nullptr;$/;"	m	class:accept_manager
m_making_packet	agent_client.h	/^        xpacket *m_making_packet = nullptr;$/;"	m	class:agent_client
m_msg_buf	accept_manager.h	/^        uint8_t m_recv_buf[RECV_BUF_LEN], m_msg_buf[RECV_BUF_LEN];$/;"	m	class:accept_manager
m_msg_buf	agent_client.h	/^        uint8_t m_recv_buf[RECV_BUF_LEN], m_msg_buf[RECV_BUF_LEN];$/;"	m	class:agent_client
m_msg_buf_pos	accept_manager.h	/^        size_t  m_msg_buf_pos = 0;$/;"	m	class:accept_manager
m_msg_buf_pos	agent_client.h	/^        size_t  m_msg_buf_pos = 0;$/;"	m	class:agent_client
m_port	accept_manager.h	/^        unsigned short m_port = DEFAULT_PORT;$/;"	m	class:accept_manager
m_prefix_buf	accept_manager.h	/^        deque<uint8_t> m_prefix_buf;$/;"	m	class:accept_manager
m_prefix_buf	agent_client.h	/^        deque<uint8_t> m_prefix_buf;$/;"	m	class:agent_client
m_recv_buf	accept_manager.h	/^        uint8_t m_recv_buf[RECV_BUF_LEN], m_msg_buf[RECV_BUF_LEN];$/;"	m	class:accept_manager
m_recv_buf	agent_client.h	/^        uint8_t m_recv_buf[RECV_BUF_LEN], m_msg_buf[RECV_BUF_LEN];$/;"	m	class:agent_client
m_recv_q	agent_client.h	/^        deque<xpacket*> m_recv_q;$/;"	m	class:agent_client
m_recv_q_lock	agent_client.h	/^        mutex m_recv_q_lock;$/;"	m	class:agent_client
m_recv_step	accept_manager.h	/^        int m_recv_step = 0;$/;"	m	class:accept_manager
m_recv_step	agent_client.h	/^        int m_recv_step = 0;$/;"	m	class:agent_client
m_send_q	agent_client.h	/^        deque<xpacket*> m_send_q;$/;"	m	class:agent_client
m_send_q_lock	agent_client.h	/^        mutex  m_send_q_lock;$/;"	m	class:agent_client
m_send_thread	agent_client.h	/^        thread m_send_thread;$/;"	m	class:agent_client
m_send_thread_stop_flag	agent_client.h	/^        bool m_send_thread_stop_flag = false;$/;"	m	class:agent_client
m_socket	agent_client.h	/^        tcp::socket* m_socket;$/;"	m	class:agent_client
m_socket_lock	accept_manager.h	/^        mutex m_socket_lock;$/;"	m	class:accept_manager
m_socket_lock	agent_client.h	/^        mutex m_socket_lock;$/;"	m	class:agent_client
m_start_time	agent_client.h	/^        chrono::time_point<chrono::system_clock> m_start_time;$/;"	m	class:agent_client
m_stream_status	hlds_agent.h	/^        int m_stream_status;			\/\/ 0 : off  1: on$/;"	m	class:hlds_agent
m_test	accept_manager.h	/^        int m_test;$/;"	m	class:accept_manager
m_tofm	agent_manager.h	/^        TofManager *m_tofm = nullptr;$/;"	m	class:agent_manager
m_z_buffer	hlds_agent.h	/^		float m_z_buffer[640 * 2][480 * 2];$/;"	m	class:hlds_agent
m_zoom	hlds_agent.h	/^        float m_zoom;                 \/\/Zoom ratio$/;"	m	class:hlds_agent
main	main.cpp	/^int main(int argc, char** argv)$/;"	f
nexttrack	hlds_agent.h	/^    int nexttrack;              \/\/Next inserting point in ring buffer$/;"	m	struct:AppHuman
prex	hlds_agent.h	/^    float prex;                 \/\/Previous X-coordinate of center of gravity of the human$/;"	m	struct:AppHuman
prey	hlds_agent.h	/^    float prey;                 \/\/Previous Y-coordinate of center of gravity of the human$/;"	m	struct:AppHuman
right_x	hlds_agent.h	/^        float right_x;$/;"	m	struct:__anon1::__anon2
status	hlds_agent.h	/^    HumanStatus status;         \/\/Status$/;"	m	struct:AppHuman
stream_hlds	stream_hlds.cpp	/^stream_hlds::stream_hlds()$/;"	f	class:stream_hlds
stream_hlds	stream_hlds.h	/^class stream_hlds : public xthread$/;"	c
stream_onoff	agent_client.h	/^		uint8_t stream_onoff = 0; \/\/default OFF$/;"	m	class:agent_client
testm_TofInfo	hlds_agent.h	/^        TofInfo testm_TofInfo;$/;"	m	class:hlds_agent
top_y	hlds_agent.h	/^        float top_y;$/;"	m	struct:__anon1::__anon2
track	hlds_agent.h	/^    } track[MAX_TRACKS];$/;"	m	struct:AppHuman	typeref:struct:AppHuman::__anon3
trackcnt	hlds_agent.h	/^    int trackcnt;               \/\/Number of points in the track$/;"	m	struct:AppHuman
unlock_img_set	agent_broker.h	/^		void unlock_img_set() { m_img_set_lock.unlock(); }$/;"	f	class:agent_broker
x	hlds_agent.h	/^        float x;                \/\/X-cordinate of one point in the track$/;"	m	struct:AppHuman::__anon3
x	hlds_agent.h	/^    float x;                    \/\/X-coordinate of center of gravity of the human$/;"	m	struct:AppHuman
y	hlds_agent.h	/^        float y;                \/\/Y-cordinate of one point in the track$/;"	m	struct:AppHuman::__anon3
y	hlds_agent.h	/^    float y;                    \/\/Y-coordinate of center of gravity of the human$/;"	m	struct:AppHuman
zetavulog	main.cpp	/^LogMgrC *zetavulog;$/;"	v
~accept_manager	accept_manager.cpp	/^accept_manager::~accept_manager()$/;"	f	class:accept_manager
~agent_broker	agent_broker.cpp	/^agent_broker::~agent_broker()$/;"	f	class:agent_broker
~agent_client	agent_client.cpp	/^agent_client::~agent_client()$/;"	f	class:agent_client
~agent_manager	agent_manager.cpp	/^agent_manager::~agent_manager()$/;"	f	class:agent_manager
~event_manager	event_manager.cpp	/^event_manager::~event_manager()$/;"	f	class:event_manager
~hlds_agent	hlds_agent.cpp	/^hlds_agent::~hlds_agent()$/;"	f	class:hlds_agent
~stream_hlds	stream_hlds.cpp	/^stream_hlds::~stream_hlds()$/;"	f	class:stream_hlds
